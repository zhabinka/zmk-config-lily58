/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

// https://github.com/urob/zmk-config?tab=readme-ov-file#timeless-homerow-mods
// https://github.com/zmkfirmware/zmk/issues/544

#define LILY58_STANDARD_LABELS

#include "zmk-helpers/key-labels/lily58.h"

#define KEYS_L LN0 LN1 LN2 LN3 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 LEC
#define KEYS_R RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 REC
#define THUMBS LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3

/ {
    combos {
        compatible = "zmk,combos";

        combo_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        combo_right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 20>;
            timeout-ms = <50>;
        };

        combo_pipe {
            bindings = <&macro_pipe>;
            key-positions = <47 48>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        /* Left-hand HRMs. */

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        /* Right-hand HRMs. */

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        backspace_morph: backspace_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_MORPH";
            bindings = <&hmr RGUI SPACE>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        td_period: td_period {
            compatible = "zmk,behavior-tap-dance";
            label = "td_period";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COLON>;
        };

        td_comma: td_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COMMA";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };

        td_slash: td_slash {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SLASH";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp PIPE>;
        };

        backtic_morph: backtic_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKTIC_MORPH";
            bindings = <&kp SQT>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        bracket_morph: bracket_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKET_MORPH";
            bindings = <&kp EQUAL>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LGUI)>;
        };

        excl: n1_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCL";
            bindings = <&kp EXCLAMATION>, <&kp KP_NUMBER_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        at_sign: n2_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "@";
            bindings = <&kp AT>, <&kp KP_NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slah: n3_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "#";
            bindings = <&kp HASH>, <&kp KP_NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dollar: n4_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "$";
            bindings = <&kp DOLLAR>, <&kp KP_NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        percent: n5_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "%";
            bindings = <&kp PERCENT>, <&kp KP_NUMBER_6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        caret: n6_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "^";
            bindings = <&kp CARET>, <&kp KP_NUMBER_6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ampersand: n7_moprh {
            compatible = "zmk,behavior-mod-morph";
            label = "&";
            bindings = <&kp AMPERSAND>, <&kp KP_NUMBER_7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        asterisk: n8_moprh {
            compatible = "zmk,behavior-mod-morph";
            label = "*";
            bindings = <&kp STAR>, <&kp KP_NUMBER_8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        l_par: n9_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "(";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp KP_NUMBER_9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        r_par: n0_morph {
            compatible = "zmk,behavior-mod-morph";
            label = ")";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp KP_NUMBER_0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        x_morph: x_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "X_MORPH";
            bindings = <&mt LG(X) X>, <&kp LG(X)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        c_morph: c_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "C_MORPH";
            bindings = <&mt LG(C) C>, <&kp LG(C)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        v_morph: v_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "V_MORPH";
            bindings = <&mt LG(V) V>, <&kp LG(V)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        a_morph: a_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "A_MORPH";
            bindings = <&hml LCTRL A>, <&kp LG(A)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    macros {
        macro_pipe: macro_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp GREATER_THAN>;
            label = "MACRO_PIPE";
        };

        macro_text_select: macro_text_select {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(A)>;
            label = "MACRO_TEXT_SELECT";
        };

        macro_text_cut: macro_cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X)>;
            label = "MACRO_CUT";
        };

        macro_text_copy: macro_copy_text {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>;
            label = "MACRO_COPY_TEXT";
        };

        macro_text_paste: macro_text_paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>;
            label = "MACRO_TEXT_PASTE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp GRAVE   &excl        &at_sign       &slah         &dollar      &percent                                       &caret   &ampersand   &asterisk        &l_par        &r_par           &kp MINUS
&kp TAB     &kp Q        &kp W          &kp E         &kp R        &kp T                                          &kp Y    &kp U        &kp I            &kp O         &kp P            &bracket_morph
&kp LCTRL   &a_morph     &hml LSHIFT S  &hml LALT D   &hml LGUI F  &kp G                                          &kp H    &hmr RGUI J  &hmr RALT K      &hmr RSHFT L  &hmr RCTRL SEMI  &backtic_morph
&kp LSHIFT  &mt LG(A) Z  &x_morph       &c_morph      &v_morph     &kp B     &kp LBKT           &kp BACKSPACE     &kp N    &kp M        &td_comma        &td_period    &td_slash        &kp BACKSLASH
                                        &lt 2 ESCAPE  &caps_word   &mo 3     &hml LGUI SPACE    &backspace_morph  &kp RET  &none        &lt 1 BACKSLASH
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2       &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans     &trans     &trans    &trans    &trans
&kp F1      &kp F2            &kp F3             &kp F4             &kp F5        &kp F6                          &kp F7     &kp F8     &kp F9     &kp F10   &kp F11   &kp F12
&kp GRAVE   &kp EXCL          &kp AT             &kp HASH           &kp DOLLAR    &kp PRCNT                       &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp TILDE
&trans      &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans        &trans        &trans    &trans  &trans     &kp MINUS  &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE
                                                 &trans             &trans        &trans        &trans    &trans  &trans     &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans     &trans  &trans  &trans   &trans   &trans                     &trans       &trans     &trans     &trans     &trans    &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                     &kp N6       &kp N7     &kp N8     &kp N9     &kp N0    &trans
&kp F1     &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                     &kp LEFT     &kp DOWN   &kp UP     &kp RIGHT  &trans    &trans
&kp F7     &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &kp KP_PLUS  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH
                           &trans   &trans   &trans   &trans    &trans  &trans       &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        numpad_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                           &trans     &trans   &trans     &trans  &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans                           &kp MINUS  &kp N7   &kp N8     &kp N9  &kp EQUAL     &trans
&trans  &trans  &trans  &trans  &trans  &trans                           &kp PLUS   &kp N4   &kp N5     &kp N6  &kp ASTERISK  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &kp BACKSPACE  &kp UNDER  &kp N1   &kp N2     &kp N3  &kp FSLH      &trans
                        &trans  &trans  &trans  &trans    &trans         &kp N0     &kp DOT  &kp COMMA
            >;
        };
    };
};
